;;; EXERCISE 1.2

(/ (+ 5 4
        (- 2
           (- 3
              (+ 6
                 (/ 4 5)))))
     (* 3
        (- 6 2)
        (- 2 7)))


;;; EXERCISE 1.3

(define (f a b c)
    (cond ((and (>= a c) (>= b c)) (sum-of-squares a b))
               ((and (>= b a) (>= c a)) (sum-of-squares b c))
               ((and (>= c b) (>= a b)) (sum-of-squares c a))))


;;; EXERCISE 1.4

(define (a-plus-abs-b a b)
  ((if (> b 0) + -) a b))

;;; 式 (if (> b 0) + -) は、bが正の値であれば演算子+を、そうでなければ演算子-を返す
;;; したがって、 式 (a-plus-abs-b a b) は、b の絶対値と a の和を返す
;;; 数式で表すと a + |b| となる


;;; EXERCISE 1.5

(define (p) (p))

(define (test x y)
  (if (= x 0)
      0
      y))

;: (test 0 (p))

;;; 正規順序評価の場合
;;; この評価方法は、「完全に展開してから簡約する」。

;;; (test 0 (p))

;;; (if (= x 0)
;;;      0
;;;      (p))

;;; 0

;;; インタプリタは式を 0 と評価する。


;;; 適用順序評価の場合
;;; この評価方法は、「引数を評価してから適用する」。

;;; (test 0 (p))

;;; インタプリタは (p) の評価を行うが、(p) が再帰的に評価され無限ループに陥る。
;;; test 式の述語式の評価に到達せず、インタプリタは値を返すことができない。

;;; EXERCISE 1.9


(define (+ a b)
  (if (= a 0)
      b
      (inc (+ (dec a) b))))

;;; このプロセスは再帰である。

;;; (+ 4 5)
;;; (inc (+ 3 5))
;;; (inc (inc (+ 2 5)))
;;; (inc (inc (inc (+ 1 5))))
;;; (inc (inc (inc (inc (+ 0 5)))))
;;; (inc (inc (inc (inc 5))))
;;; (inc (inc (inc 6)))
;;; (inc (inc 7))
;;; (inc 8)
;;; 9

(define (+ a b)
  (if (= a 0)
      b
      (+ (dec a) (inc b))))

;;; このプロセスは反復である。

;;; (+ 4 5)
;;; (+ 3 6)
;;; (+ 2 7)
;;; (+ 1 8)
;;; (+ 0 9)
;;; 9


;;; EXERCISE 1.10

(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))


;;; (A 1 10)
;;; (A 0 (A 1 9))
;;; (A 0 (A 0 (A 1 8)))
;;; (A 0 (A 0 (A 0 (A 1 7))))
;;; (A 0 (A 0 (A 0 (A 0 (A 1 6)))))
;;; (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 5))))))
;;; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 4)))))))
;;; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 3))))))))
;;; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 2)))))))))
;;; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 1))))))))))
;;; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 2)))))))))
;;; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 4))))))))
;;; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 8)))))))
;;; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 16))))))
;;; (A 0 (A 0 (A 0 (A 0 (A 0 32)))))
;;; (A 0 (A 0 (A 0 (A 0 64))))
;;; (A 0 (A 0 (A 0 128)))
;;; (A 0 (A 0 256))
;;; (A 0 512)
;;; 1024

;;; (A 2 4)
;;; (A 1 (A 2 3))
;;; (A 1 (A 1 (A 2 2)))
;;; (A 1 (A 1 (A 1 (A 2 1))))
;;; (A 1 (A 1 (A 1 2)))
;;; (A 1 (A 1 (A 0 (A 1 1))))
;;; (A 1 (A 1 (A 0 2)))
;;; (A 1 (A 1 4))
;;; (A 1 (A 0 (A 1 3)))
;;; (A 1 (A 0 (A 0 (A 1 2))))
;;; (A 1 (A 0 (A 0 (A 0 (A 1 1)))))
;;; (A 1 (A 0 (A 0 (A 0 2))))
;;; (A 1 (A 0 (A 0 4)))
;;; (A 1 (A 0 8))
;;; (A 1 16)
;;; ...
;;; (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 1))))))))))))))))
;;; ...
;;; 65535

;;; (A 3 3)
;;; (A 2 (A 3 2))
;;; (A 2 (A 2 (A 3 1)))
;;; (A 2 (A 2 2))
;;; ...
;;; (A 2 (A 0 2))
;;; (A 2 4)
;;; 65535


(define (f n) (A 0 n))

;;; n = 0 のとき
;;; (f 0)
;;; (A 0 0)
;;; 0

;;; n > 0 のとき
;;; (f n)
;;; (A 0 n)
;;; 2n

;;; $ f(n) = 2n $


(define (g n) (A 1 n))

;;; (g n)

;;; n = 0 のとき
;;; (g 0)
;;; (A 1 0)
;;; 0

;;; n > 0 のとき
;;; (g n)
;;; (A 1 n)
;;; (A 0 (A 1 (dec n)))
;;; ...
;;; (A 0 (A 0 ... (A 0 (A 1 1)) ...))
;;; (A 0 (A 0 ... (A 0 2) ...))

;;; ここで、 括弧のネストは n 重であることに注意すると
;;; $ g(n) = 0    (n = 0) $
;;; $ g(n) = 2^n  (n > 0) $


(define (h n) (A 2 n))

;;; n = 0 のとき
;;; (h 0)
;;; (A 2 0)
;;; 0

;;; n > 0 のとき
;;; (h n)
;;; (A 2 n)
;;; (A 1 (A 2 (dec n)))
;;; (g (h (dec n)))
;;; (g (g ... (h 1) ...))

;;; ここで、括弧のネストは n 重であることに注意すると
;;; $ h(n) = 0          (n = 0) $
;;; $ h(n) = 2^2^...^2  (n > 0) $
;;; ただし、n > 0 の場合 2 の個数は n の個数と等しい。すなわち
;;; $ h(1) = 2 = 2 $
;;; $ h(2) = 2^2 = 4 $
;;; $ h(3) = 2^2^2 = 2^4 = 16 $
;;; $ h(4) = 2^2^2^2 = 2^16 = 65536 $
;;; ...
